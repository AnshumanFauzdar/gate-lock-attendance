#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <MFRC522.h>
#include <ESP8266WiFi.h>

#include <WiFiClientSecure.h>

#define SS_PIN D8
#define RST_PIN D3    // Configurable, see typical pin layout above

// OLED Screen Size
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

MFRC522 mfrc522(SS_PIN, RST_PIN);  // Create MFRC522 instance
#define BUZZ_PIN D4
#define GATE_PIN D3
const char* host = "script.google.com";
const int httpsPort = 443;
const char* fingerprint  = "46 B2 C3 44 9C 59 09 8B 01 B6 F8 BD 4C FB 00 74 91 2F EF F6"; // for https


//***********Things to change*******************
const char* ssid = "YOUR_SSID_HERE";
const char* password = "YOUR_WIFI_PASSWORD_HERE";
String GOOGLE_SCRIPT_ID = "YOUR_WEB_APP_ID_HERE"; // Replace by your GAS service id
const String unitName = "headquarter"; // any name without spaces and special characters
//***********Things to change*******************
uint64_t openGateMillis = 1000;
WiFiClientSecure client;

void Siren()
{
  for (int hz = 440; hz < 1000; hz++) {
    tone(BUZZ_PIN, hz, 50);
    delay(5);
  }

  for (int hz = 1000; hz > 440; hz--) {
    tone(BUZZ_PIN, hz, 50);
    delay(5);
  }
  digitalWrite(BUZZ_PIN, LOW);
}


void Beep()
{
  for (int i = 0; i < 1000; i++)
  {
    analogWrite(BUZZ_PIN, i);
    delayMicroseconds(50);
  }
  digitalWrite(BUZZ_PIN, LOW);
}

void Beep2()
{
  tone(BUZZ_PIN, 1000, 30);
  delay(300);
  digitalWrite(BUZZ_PIN, LOW);
}

void setup() {

  Serial.begin(115200); 
  
  pinMode(GATE_PIN, OUTPUT);
  pinMode(BUZZ_PIN, OUTPUT);
  digitalWrite(GATE_PIN, LOW);
  digitalWrite(BUZZ_PIN, LOW);
  
// SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3C for 128x64
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }
  
  // Clear the buffer
  display.clearDisplay();
  logo();
  delay(3000);
  display.clearDisplay();
    
   display.clearDisplay();
   display.setTextSize(2);             
   display.setTextColor(WHITE);        
   display.setCursor(0,10);             
   display.println("Please");
   display.setCursor(0,30);
   display.println("Wait...");
   display.display();
    
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  Serial.println("Started");
  Serial.print("Connecting");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }


  // Initialize serial communications with the PC
  while (!Serial);    // Do nothing if no serial port is opened (added for Arduinos based on ATMEGA32U4)
  SPI.begin();      // Init SPI bus
  mfrc522.PCD_Init();   // Init MFRC522
  delay(4);       // Optional delay. Some board do need more time after init to be ready, see Readme
  mfrc522.PCD_DumpVersionToSerial();  // Show details of PCD - MFRC522 Card Reader details
  Serial.println(F("Scan PICC to see UID, SAK, type, and data blocks..."));
    OpenGate();
    touch();
    display.display();
    display.clearDisplay();

}

byte readCard[4];

void HandleDataFromGoogle(String data)
{
  int ind = data.indexOf(":");
  String access = data.substring(0, ind);
  int nextInd = data.indexOf(":", ind + 1);
  String name = data.substring(ind + 1, nextInd);
  String text = data.substring(nextInd + 1, data.length());
  Serial.println(name);
    display.clearDisplay();
    display.setTextSize(2);             
    display.setTextColor(WHITE);        
    display.setCursor(0,10);             
    display.println("Welcome");
    display.setCursor(0,30);
    display.println(name);
    display.display();

  if (access=="-1")
  {

    Siren(); 

  }
  else if(access=="any")
  {
    
    OpenGate();
  }
  else if (access=="office")
  {

    OpenGate();
  }
    delay(5000);
    display.clearDisplay();
    touch();
    display.display();
}

void logo()
{
  static const unsigned char PROGMEM image_data_Saraarray[] = {
  0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x3f, 0xff, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x0f, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0x87, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x03, 0xff, 0xff, 0xff, 0xcf, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x7f, 0xff, 0xff, 0xfd, 0xcf, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x07, 0xff, 0xff, 0xff, 0xed, 0x8d, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x3f, 0xff, 0xff, 0xdf, 0xcd, 0x8d, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xdd, 0xc9, 0x0d, 0xde, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xff, 0xfe, 0x03, 0xff, 0xfd, 0xff, 0x9d, 0x9a, 0x19, 0x9e, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xff, 0xf8, 0x0f, 0xff, 0xdf, 0xbb, 0x19, 0x10, 0x13, 0x1e, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xfd, 0xfb, 0x33, 0x32, 0x10, 0x10, 0x1e, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xfd, 0x80, 0x00, 0x20, 0x00, 0x00, 0x1e, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xff, 0x83, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xff, 0x07, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xfc, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xf8, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xf0, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xe1, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xc3, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0x87, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xfe, 0x3f, 0xc0, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xfc, 0x7f, 0x80, 0x00, 0x00, 0x3f, 0xfc, 0x7f, 0xfe, 0x03, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xfc, 0xff, 0x00, 0x00, 0xc0, 0x0f, 0xfe, 0x3f, 0xfc, 0x03, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xf9, 0xfe, 0x00, 0x07, 0x00, 0x07, 0xfe, 0x3f, 0xfc, 0x07, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xf3, 0xfc, 0x00, 0x7e, 0x00, 0x03, 0xff, 0x1f, 0xf8, 0x0f, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xe7, 0xf8, 0x01, 0xfe, 0x00, 0x01, 0xff, 0x1f, 0xf8, 0x0f, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xcf, 0xf0, 0x03, 0xfc, 0x00, 0x00, 0xff, 0x9f, 0xf0, 0x1f, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xdf, 0xc0, 0x07, 0xfc, 0x00, 0x00, 0xff, 0x9f, 0xf0, 0x1f, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xbf, 0x80, 0x47, 0xfc, 0x00, 0x00, 0xff, 0x8f, 0xe0, 0x3f, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0x3f, 0x01, 0xc7, 0xf8, 0x00, 0x00, 0x7f, 0x8f, 0xc0, 0x7f, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0x7f, 0x03, 0xcf, 0xf8, 0x00, 0x00, 0x7f, 0xcf, 0x80, 0x7f, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xfe, 0x07, 0xcf, 0xf8, 0x00, 0x00, 0x7f, 0xcf, 0x80, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xfc, 0x1f, 0xcf, 0xf8, 0x00, 0x00, 0x7f, 0xcf, 0x01, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xf8, 0x3f, 0xc7, 0xf8, 0x00, 0x00, 0x7f, 0x8e, 0x01, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xf0, 0x7f, 0xc7, 0xfc, 0x00, 0x00, 0x7f, 0x8c, 0x03, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xe0, 0xff, 0xc7, 0xfc, 0x00, 0x00, 0xff, 0x88, 0x07, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xc3, 0xff, 0xe7, 0xfc, 0x00, 0x00, 0xff, 0x80, 0x0f, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0x87, 0xff, 0xe3, 0xfe, 0x00, 0x01, 0xff, 0x00, 0x1f, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0x8f, 0xff, 0xe3, 0xfe, 0x00, 0x01, 0xff, 0x00, 0x3f, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0x1f, 0xff, 0xf1, 0xff, 0x00, 0x03, 0xfe, 0x00, 0x7f, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xfe, 0x3f, 0xff, 0xf1, 0xff, 0xc0, 0x0f, 0xfc, 0x00, 0xff, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xfc, 0x7f, 0xff, 0xf8, 0xff, 0xe0, 0x1f, 0xf8, 0x01, 0xff, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xfc, 0xff, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xf0, 0x07, 0xff, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xf9, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xc0, 0x0f, 0xff, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xf3, 0xff, 0xff, 0xfe, 0x1f, 0xff, 0xff, 0x00, 0x1f, 0xff, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xf7, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xf8, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x83, 0xff, 0xc0, 0x00, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xfe, 0x00, 0x1f, 0xff, 0xc0, 0xfc, 0x00, 0x03, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xf0, 0x00, 0x00, 0x3f, 0xf0, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00
};

 display.clearDisplay();
  
  // Draw bitmap on the screen
  display.drawBitmap(0, 0, image_data_Saraarray, 128, 64, 1);
  display.display();
}
void wait()
{
  static const unsigned char PROGMEM image_data_Saraarray[] = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x00, 0x07, 0xc0, 0xff, 0xe0, 0x00, 0x0f, 0xf9, 0xff, 0xf8, 0x00, 0x20, 0x00, 0x0f, 0xff, 
  0xff, 0x00, 0x01, 0xc0, 0xff, 0xe0, 0x00, 0x0f, 0xf0, 0xff, 0xe0, 0x00, 0x20, 0x00, 0x0f, 0xff, 
  0xff, 0x00, 0x00, 0xc0, 0xff, 0xe0, 0x00, 0x0f, 0xf0, 0x7f, 0xc0, 0x00, 0x20, 0x00, 0x0f, 0xff, 
  0xff, 0x00, 0x00, 0xc0, 0xff, 0xe0, 0x00, 0x0f, 0xe0, 0x7f, 0xc0, 0x00, 0x20, 0x00, 0x0f, 0xff, 
  0xff, 0x00, 0x00, 0x40, 0xff, 0xe0, 0x00, 0x0f, 0xe0, 0x3f, 0x80, 0x00, 0x20, 0x00, 0x0f, 0xff, 
  0xff, 0x00, 0x00, 0x40, 0xff, 0xe0, 0x00, 0x0f, 0xc0, 0x3f, 0x80, 0x00, 0x20, 0x00, 0x0f, 0xff, 
  0xff, 0x03, 0xe0, 0x40, 0xff, 0xe0, 0x7f, 0xff, 0x80, 0x1f, 0x81, 0xff, 0xe0, 0x7f, 0xff, 0xff, 
  0xff, 0x00, 0x00, 0x40, 0xff, 0xe0, 0x00, 0x7f, 0x80, 0x1f, 0x80, 0x03, 0xe0, 0x00, 0x7f, 0xff, 
  0xff, 0x00, 0x00, 0x40, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x0f, 0x80, 0x00, 0xe0, 0x00, 0x7f, 0xff, 
  0xff, 0x00, 0x00, 0xc0, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x07, 0xc0, 0x00, 0x60, 0x00, 0x7f, 0xff, 
  0xff, 0x00, 0x00, 0xc0, 0xff, 0xe0, 0x00, 0x7e, 0x02, 0x07, 0xc0, 0x00, 0x60, 0x00, 0x7f, 0xff, 
  0xff, 0x00, 0x01, 0xc0, 0xff, 0xe0, 0x00, 0x7e, 0x06, 0x03, 0xe0, 0x00, 0x20, 0x00, 0x7f, 0xff, 
  0xff, 0x00, 0x07, 0xc0, 0xff, 0xe0, 0x00, 0x7c, 0x0f, 0x03, 0xf8, 0x00, 0x20, 0x00, 0x7f, 0xff, 
  0xff, 0x03, 0xff, 0xc0, 0xff, 0xe0, 0x7f, 0xf8, 0x0f, 0x81, 0xff, 0xf0, 0x20, 0x7f, 0xff, 0xff, 
  0xff, 0x03, 0xff, 0xc0, 0x00, 0x60, 0x00, 0x08, 0x1f, 0x80, 0x80, 0x00, 0x20, 0x00, 0x0f, 0xff, 
  0xff, 0x03, 0xff, 0xc0, 0x00, 0x60, 0x00, 0x00, 0x1f, 0xc0, 0x80, 0x00, 0x20, 0x00, 0x0f, 0xff, 
  0xff, 0x03, 0xff, 0xc0, 0x00, 0x60, 0x00, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x60, 0x00, 0x0f, 0xff, 
  0xff, 0x03, 0xff, 0xc0, 0x00, 0x60, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x00, 0x60, 0x00, 0x0f, 0xff, 
  0xff, 0x03, 0xff, 0xc0, 0x00, 0x60, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0xe0, 0x00, 0x0f, 0xff, 
  0xff, 0x03, 0xff, 0xc0, 0x00, 0x60, 0x00, 0x00, 0xff, 0xf0, 0x00, 0x03, 0xe0, 0x00, 0x0f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf8, 0x1f, 0xe0, 0x7f, 0xcf, 0xfc, 0x08, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf8, 0x1f, 0xe0, 0x7f, 0x87, 0xfc, 0x08, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf8, 0x1f, 0xe0, 0x7f, 0x83, 0xfc, 0x08, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf8, 0x1f, 0xe0, 0x7f, 0x03, 0xfc, 0x08, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf8, 0x1c, 0xe0, 0x7f, 0x01, 0xfc, 0x08, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf8, 0x18, 0x60, 0x7e, 0x01, 0xfc, 0x08, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf8, 0x10, 0x20, 0x7c, 0x00, 0xfc, 0x0f, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x7c, 0x00, 0xfc, 0x0f, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x78, 0x00, 0x7c, 0x0f, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x78, 0x00, 0x3c, 0x0f, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x70, 0x10, 0x3c, 0x0f, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x70, 0x30, 0x1c, 0x0f, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf8, 0x03, 0x00, 0x60, 0x78, 0x1c, 0x0f, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf8, 0x07, 0x80, 0x40, 0x7c, 0x0c, 0x0f, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf8, 0x0f, 0xc0, 0x40, 0xfc, 0x04, 0x0f, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf8, 0x1f, 0xe0, 0x00, 0xfe, 0x04, 0x0f, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf8, 0x3f, 0xf0, 0x01, 0xfe, 0x00, 0x0f, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf8, 0x7f, 0xf8, 0x01, 0xff, 0x00, 0x0f, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf8, 0xff, 0xfc, 0x03, 0xff, 0x00, 0x0f, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf9, 0xff, 0xfe, 0x07, 0xff, 0x80, 0x0f, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

 display.clearDisplay();
  
  // Draw bitmap on the screen
  display.drawBitmap(0, 0, image_data_Saraarray, 128, 64, 1);
  display.display();
}
void touch()
{
  static const unsigned char PROGMEM image_data_Saraarray[] = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xf0, 0x00, 0xf0, 0x7c, 0x7c, 0x7c, 0x1e, 0x3e, 0x3f, 0x0f, 0x0f, 0x07, 0xc7, 0xc6, 0x01, 0xff, 
  0xf0, 0x00, 0xe0, 0x3c, 0x7c, 0x70, 0x0e, 0x3e, 0x3f, 0x8f, 0x1e, 0x03, 0xc7, 0xc6, 0x00, 0xff, 
  0xf8, 0x01, 0xc0, 0x1c, 0x7c, 0x70, 0x06, 0x3e, 0x3f, 0x8f, 0x1c, 0x01, 0xc7, 0xc6, 0x00, 0x7f, 
  0xff, 0x1f, 0x87, 0x0c, 0x7c, 0x63, 0xc6, 0x3e, 0x3f, 0xc6, 0x38, 0x70, 0xc7, 0xc6, 0x3c, 0x7f, 
  0xff, 0x1f, 0x8f, 0x8c, 0x7c, 0x63, 0xe2, 0x3e, 0x3f, 0xc6, 0x38, 0xf8, 0xc7, 0xc6, 0x3c, 0x7f, 
  0xff, 0x1f, 0x8f, 0x8c, 0x7c, 0x63, 0xfe, 0x3e, 0x3f, 0xe0, 0x78, 0xf8, 0xc7, 0xc6, 0x3c, 0x7f, 
  0xff, 0x1f, 0x8f, 0x8c, 0x7c, 0x63, 0xfe, 0x00, 0x3f, 0xe0, 0x78, 0xf8, 0xc7, 0xc6, 0x00, 0xff, 
  0xff, 0x1f, 0x8f, 0x8c, 0x7c, 0x63, 0xfe, 0x00, 0x3f, 0xf0, 0xf8, 0xf8, 0xc7, 0xc6, 0x01, 0xff, 
  0xff, 0x1f, 0x8f, 0x8c, 0x7c, 0x63, 0xfe, 0x00, 0x3f, 0xf0, 0xf8, 0xf8, 0xc7, 0xc6, 0x01, 0xff, 
  0xff, 0x1f, 0x8f, 0x8c, 0x7c, 0x63, 0xe2, 0x3e, 0x3f, 0xf0, 0xf8, 0xf8, 0xc7, 0xc6, 0x30, 0xff, 
  0xff, 0x1f, 0x87, 0x0c, 0x38, 0x63, 0xc6, 0x3e, 0x3f, 0xf0, 0xf8, 0x70, 0xc3, 0x86, 0x38, 0xff, 
  0xff, 0x1f, 0xc0, 0x1e, 0x00, 0xe0, 0x06, 0x3e, 0x3f, 0xf0, 0xfc, 0x01, 0xe0, 0x0e, 0x38, 0x7f, 
  0xff, 0x1f, 0xe0, 0x3f, 0x01, 0xf0, 0x0e, 0x3e, 0x3f, 0xf0, 0xfe, 0x03, 0xf0, 0x1e, 0x3c, 0x7f, 
  0xff, 0x1f, 0xf0, 0x7f, 0x83, 0xfc, 0x1e, 0x3e, 0x3f, 0xf0, 0xff, 0x07, 0xf8, 0x3e, 0x3c, 0x7f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0xf8, 0x7e, 0x00, 0xf8, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf8, 0x03, 0xf8, 0x7e, 0x00, 0x38, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x03, 0xf8, 0x3e, 0x00, 0x38, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf1, 0xe1, 0xf0, 0x3e, 0x1e, 0x18, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe1, 0xf1, 0xf0, 0x3e, 0x1e, 0x18, 0x78, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xf1, 0x1e, 0x1e, 0x18, 0x78, 0x7f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xe3, 0x1e, 0x1e, 0x38, 0x78, 0x7f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xe3, 0x0e, 0x00, 0x38, 0x78, 0x7f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xc3, 0x8e, 0x00, 0x78, 0x78, 0x7f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xc0, 0x0e, 0x00, 0xf8, 0x78, 0x7f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe1, 0xf1, 0xc0, 0x06, 0x18, 0x78, 0x78, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf1, 0xe1, 0x80, 0x06, 0x1c, 0x78, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x03, 0x8f, 0xc6, 0x1c, 0x38, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf8, 0x03, 0x8f, 0xc2, 0x1e, 0x18, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0x0f, 0xc2, 0x1e, 0x18, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

 display.clearDisplay();
  
  // Draw bitmap on the screen
  display.drawBitmap(0, 0, image_data_Saraarray, 128, 64, 1);
  display.display();
}
void OpenGate()
{
  openGateMillis = millis()+5000;
  digitalWrite(GATE_PIN, HIGH);
  Beep();
  delay(100);
  Beep();
}

void CloseGate()
{
  openGateMillis = 0;
  digitalWrite(GATE_PIN, LOW);
  Beep2();
}

void loop() {
  if (openGateMillis > 0 && openGateMillis < millis())
  {
    CloseGate();
  }


  if (!mfrc522.PICC_IsNewCardPresent()) {
    return;
  }

  // Select one of the cards
  // Reset the loop if no new card present on the sensor/reader. This saves the entire process when idle.
  if (!mfrc522.PICC_ReadCardSerial()) {
    return;
  }
  Serial.println(F("Scanned PICC's UID:"));
  String uid = "";
  for (uint8_t i = 0; i < 4; i++) {  //
    readCard[i] = mfrc522.uid.uidByte[i];
    Serial.print(readCard[i], HEX);
    uid += String(readCard[i],HEX);
  }
  Serial.println("");
  wait();
  Beep();
  String data = sendData("id=" + unitName + "&uid=" + uid,NULL);
  HandleDataFromGoogle(data);


  mfrc522.PICC_HaltA();
}


String sendData(String params, char* domain) {
  //google scripts requires two get requests 
  bool needRedir = false;
  if (domain == NULL)
  {
    domain=(char*)host;
    needRedir = true;
    params = "/macros/s/" + GOOGLE_SCRIPT_ID + "/exec?" + params;
  }
  
  Serial.println(*domain);
  String result = "";
  client.setInsecure();
  Serial.print("connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("connection failed");
    return "";
  }

  if (client.verify(fingerprint, domain)) {
  }

  Serial.print("requesting URL: ");
  Serial.println(params);

  client.print(String("GET ") + params + " HTTP/1.1\r\n" +
    "Host: " + domain + "\r\n" +
    "Connection: close\r\n\r\n");

  Serial.println("request sent");
  while (client.connected()) {

    String line = client.readStringUntil('\n');
    Serial.println(line);
    if (needRedir) {

    int ind = line.indexOf("/macros/echo?user");
    if (ind > 0)
    {
      Serial.println(line);
      line = line.substring(ind);
      ind = line.lastIndexOf("\r");
      line = line.substring(0, ind);
      Serial.println(line);
      result = line;
    }
    }

    if (line == "\r") {
      Serial.println("headers received");
      break;
    }
  }
  while (client.available()) {
    String line = client.readStringUntil('\n');
    if(!needRedir)
    if (line.length() > 5)
      result = line;
    Serial.println("END");

    
    }
  if (needRedir)
    return sendData(result, "script.googleusercontent.com");
  else return result;
  
}
